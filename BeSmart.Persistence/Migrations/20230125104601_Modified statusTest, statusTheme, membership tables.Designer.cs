// <auto-generated />
using System;
using BeSmart.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeSmart.WebApi.Migrations
{
    [DbContext(typeof(BeSmartDbContext))]
    [Migration("20230125104601_Modified statusTest, statusTheme, membership tables")]
    partial class ModifiedstatusTeststatusThememembershiptables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeSmart.Domain.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Fidelity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Answer_text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Card_imageUrl");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Card_text");

                    b.Property<string>("Transctipt")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Card_transcript");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Card_word");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Category_name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CountOfThemes")
                        .HasColumnType("integer")
                        .HasColumnName("Course_CountOfThemes");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Course_Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Lesson_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Lesson_text");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountOfCompletedThemes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Amount_of_completed_themes");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Не пройдено");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Question_Text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("Lesson_ID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Не пройдено");

                    b.Property<int>("StatusThemeId")
                        .HasColumnType("integer")
                        .HasColumnName("Status_of_theme_ID");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StatusThemeId");

                    b.ToTable("StatusLessons");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountOfFaithfullAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Amount_of_faithfull_answers");

                    b.Property<int?>("AmountOfIncorrectAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Amount_of_incorrect_answers");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Не пройдено");

                    b.Property<int>("StatusThemeId")
                        .HasColumnType("integer")
                        .HasColumnName("Status_of_theme_ID");

                    b.Property<int>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("Test_ID");

                    b.HasKey("Id");

                    b.HasIndex("StatusThemeId");

                    b.HasIndex("TestId");

                    b.ToTable("StatusTests");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmountOfCompletedLessons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Amount_of_completed_lessons");

                    b.Property<int>("MembershipId")
                        .HasColumnType("integer")
                        .HasColumnName("Membersip_ID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Не пройдено");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer")
                        .HasColumnName("Theme_ID");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("ThemeId");

                    b.ToTable("StatusThemes");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Test_Name");

                    b.Property<int>("QuestionsCount")
                        .HasColumnType("integer")
                        .HasColumnName("Test_QuestionsCount");

                    b.Property<int>("ThemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountLesson")
                        .HasColumnType("integer")
                        .HasColumnName("Theme_CountLesson");

                    b.Property<int>("CountTest")
                        .HasColumnType("integer")
                        .HasColumnName("Theme_CountTest");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("Theme_Name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("User_Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("User_Password");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("User_Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Answer", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Card", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Lesson", "Lesson")
                        .WithMany("Cards")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Course", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeSmart.Domain.Models.User", "CreatedBy")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Lesson", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Theme", "Theme")
                        .WithMany("Lessons")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Membership", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Course", "Course")
                        .WithMany("Memberships")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeSmart.Domain.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Question", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Test", "Test")
                        .WithMany("Questsions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusLesson", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Lesson", "Lesson")
                        .WithMany("StatusLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeSmart.Domain.Models.StatusTheme", "StatusTheme")
                        .WithMany("StatusLessons")
                        .HasForeignKey("StatusThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("StatusTheme");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusTest", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.StatusTheme", "StatusTheme")
                        .WithMany("StatusTests")
                        .HasForeignKey("StatusThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeSmart.Domain.Models.Test", "Test")
                        .WithMany("StatusTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusTheme");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusTheme", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Membership", "Membership")
                        .WithMany("StatusThemes")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeSmart.Domain.Models.Theme", "Theme")
                        .WithMany("StatusThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Test", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Theme", "Theme")
                        .WithMany("Tests")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Theme", b =>
                {
                    b.HasOne("BeSmart.Domain.Models.Course", "Course")
                        .WithMany("CourseThemes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Course", b =>
                {
                    b.Navigation("CourseThemes");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Lesson", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("StatusLessons");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Membership", b =>
                {
                    b.Navigation("StatusThemes");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.StatusTheme", b =>
                {
                    b.Navigation("StatusLessons");

                    b.Navigation("StatusTests");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Test", b =>
                {
                    b.Navigation("Questsions");

                    b.Navigation("StatusTests");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.Theme", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("StatusThemes");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("BeSmart.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
